import { Rectangle } from '@/types/tshirt-design';

// Print area bounds cho t·ª´ng size √°o
// D·ª±a tr√™n k√≠ch th∆∞·ªõc th·ª±c t·∫ø c·ªßa √°o ƒë·ªÉ t·∫°o tr·∫£i nghi·ªám tr·ª±c quan
export const PRINT_AREA_BOUNDS_BY_SIZE = {
  // Size S - Nh·ªè nh·∫•t
  S: {
    front: { x: 135, y: 165, width: 120, height: 150 },
    back: { x: 136, y: 145, width: 118, height: 148 }
  },
  // Size M - Trung b√¨nh (baseline)
  M: {
    front: { x: 128, y: 155, width: 138, height: 171 },
    back: { x: 129, y: 135, width: 131, height: 165 }
  },
  // Size L - L·ªõn h∆°n
  L: {
    front: { x: 120, y: 145, width: 155, height: 190 },
    back: { x: 121, y: 125, width: 148, height: 185 }
  },
  // Size XL - R·∫•t l·ªõn
  XL: {
    front: { x: 112, y: 135, width: 170, height: 210 },
    back: { x: 113, y: 115, width: 163, height: 205 }
  },
  // Size XXL - C·ª±c l·ªõn
  XXL: {
    front: { x: 105, y: 125, width: 185, height: 230 },
    back: { x: 106, y: 105, width: 178, height: 225 }
  }
};

// Map ƒë·ªÉ handle c√°c variant c·ªßa size names
const SIZE_ALIASES: Record<string, keyof typeof PRINT_AREA_BOUNDS_BY_SIZE> = {
  'S': 'S',
  'M': 'M',
  'L': 'L',
  'XL': 'XL',
  'XXL': 'XXL',
  // Lowercase variants
  's': 'S',
  'm': 'M',
  'l': 'L',
  'xl': 'XL',
  'xxl': 'XXL',
  // Other variants
  'small': 'S',
  'medium': 'M',
  'large': 'L',
  'extra-large': 'XL',
  'extra-extra-large': 'XXL'
};

/**
 * L·∫•y print area bounds d·ª±a tr√™n size √°o v√† view (front/back)
 */
export function getPrintAreaBounds(size: string, view: 'front' | 'back'): Rectangle {
  // S·ª≠ d·ª•ng SIZE_ALIASES ƒë·ªÉ map size name
  const mappedSize = SIZE_ALIASES[size] || SIZE_ALIASES[size.toUpperCase()] || 'M';

  console.log('üéØ getPrintAreaBounds called:', {
    originalSize: size,
    mappedSize,
    view,
    availableSizes: Object.keys(SIZE_ALIASES)
  });

  // L·∫•y size data
  const sizeData = PRINT_AREA_BOUNDS_BY_SIZE[mappedSize];

  const result = sizeData[view];
  console.log('üéØ getPrintAreaBounds result:', result);

  return result;
}

/**
 * L·∫•y max dimensions d·ª±a tr√™n print area bounds
 */
export function getMaxDimensions(size: string, view: 'front' | 'back'): { width: number; height: number } {
  const bounds = getPrintAreaBounds(size, view);
  return {
    width: bounds.width,
    height: bounds.height
  };
}

/**
 * L·∫•y safe area (v√πng an to√†n) d·ª±a tr√™n print area bounds
 * Safe area nh·ªè h∆°n print area kho·∫£ng 5px m·ªói b√™n
 */
export function getSafeArea(size: string, view: 'front' | 'back'): Rectangle {
  const bounds = getPrintAreaBounds(size, view);
  const margin = 5;
  
  return {
    x: bounds.x + margin,
    y: bounds.y + margin,
    width: bounds.width - (margin * 2),
    height: bounds.height - (margin * 2)
  };
}

/**
 * Ki·ªÉm tra xem m·ªôt size c√≥ h·ª£p l·ªá kh√¥ng
 */
export function isValidSize(size: string): boolean {
  const normalizedSize = size.toUpperCase();
  return normalizedSize in PRINT_AREA_BOUNDS_BY_SIZE;
}

/**
 * L·∫•y danh s√°ch t·∫•t c·∫£ c√°c size c√≥ s·∫µn
 */
export function getAvailableSizes(): string[] {
  return Object.keys(PRINT_AREA_BOUNDS_BY_SIZE);
}
